<!--Title: Introduction-->
<markdown>

  <p>FubuLocalization's API is relatively simple. You either a) use explicit placeholders for text that you want localized or b) conventionally define "keys" to point to the text you want to use.</p>
  
  <Section title="The StringToken class" id="stringtokens">
    <br/>
    <p>At its simplest definition, a StringToken is simply a key/value pair. More specifically, it's a combination of a <code>key</code>
    and the <code>default value</code> for that <code>key</code>. Let's take a look at some code:
    </p>
    
  </Section>

  <Snippet name="ExampleKeys" />

  <p>In this particular example we have two tokens: InvalidFormat and Required. The <code>StringToken</code> class is smart enough
  to generate the <code>key</code> for us based on the field name. Therefore, the keys are "InvalidFormat" and "Required", respectively. The string
  that is passed into the constructor of our <code>ExampleKeys</code> class is the <code>default value</code> of the token. So, we have created key/value pairs
  of "InvalidFormat:Data is formatted incorrectly" and "Required:Required Field".
  </p>
  <p>Let's touch briefly touch on namespacing and then we'll discuss how render <code>StringTokens</code>.
</p>

  <Section title="Using namespaces" id="namespacing">
    <br/>
    <p>
      Using default keys works well for simple scenarios. However, as your usage of <code>StringTokens</code> increases, you'll quickly duplicate your keys. For this reason,
      there is an option to <code>namespace</code> your keys by <code>type</code> (your custom class).
    </p>

  </Section>

  <Snippet name="ExampleNamespacing" />

  <p>By providing the <code>namespaceByType: true</code> parameter to the base constructor, we are telling the <code>StringToken</code> class to use the name of our class as a
    prefix for our keys. In this case, our keys will be: "ExampleNamespacing:One" and "ExampleNamespacing:Two".
  </p>

  <Section title="Rendering tokens" id="rendering">
    <br/>
    <p>To render a <code>StringToken</code> you just need to call <code>ToString()</code>. The <code>StringToken</code> class overrides the <code>ToString</code> method and invokes the <code>LocalizationManager</code> class,
    as demonstrated here:
  </p>
  </Section>

  <Snippet name="RenderingTokens" />

  <p>The <code>LocalizationManager</code> class uses the key of the <code>StringToken</code> to lookup the appropriate value, falling back to the <code>Default Value</code> if the key is not found. We'll discuss how to
  implement and register custom strategies for finding values in another topic.
  </p>

  <Section title="Conventional key usage" id="conventional-keys">
    <br/>
    <p>The <code>StringToken</code> class has a static method called <code>FromKeyString</code>. This method is used to create instances of the
    <code>StringToken</code> class during runtime. The follow is an example of its usage:</p>
  </Section>
  
  <Snippet name="FromKeyStringUsage" />
  
  <p>The two overloads make it possible to generate tokens based on metadata. Consider a scenario where you have templates in your application. These
  templates can be registered through plugins and are all gathered through your IoC container. You would like to provide a localizable header for each template type:</p>
  
  <Snippet name="ConventionalKeyUsage" />
  
</markdown>