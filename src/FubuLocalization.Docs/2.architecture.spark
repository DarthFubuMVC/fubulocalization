<!--Title: Architecture-->

<markdown>

  <Section title="LocalizationManager" id="manager">
  <br/>
    The <code>LocalizationManager</code> class is simply a <code>static facade</code> for the <code>ILocalizationDataProvider</code> interface. The reasoning
    for this is because the <code>StringToken</code> class overrides its <code>ToString</code> method to statically render itself as localized. For both
    testing and extensibility purposes, the <code>LocalizationManager</code> class exposes a static <code>RegisterProvider</code> method that allows the configured instance of
    <code>ILocalizationDataProvider</code> to be overridden by supplying a <code>Func&lt;ILocalizationDataProvider&gt;</code>.
  </Section>

  <Section title="Property Tokens" id="property-tokens">
    <br/>
    <p>The <code>PropertyToken</code> class is the canonical way of referring to a localized property of a particular object. It is responsible for generating
    the property <code>StringToken key</code> for the property by using both the <code>parent type</code> and the <code>name</code> of the property.
    The <code>key</code> generated by the <code>PropertyToken</code> looks like: </p>
    
  </Section>  
    
  <Snippet name="PropertyTokenKey" />
    
  <p>Often times multiple models (i.e., view models) are used in systems to refer to the same domain concept. It is typically desirable for all of those models
  to leverage the same localization mechanics to centralize the information. The <code>PropertyToken</code> class provides an overloaded constructor for the <code>parent type</code> to be
  explicitly provided.</p>

  <Section title="ILocalizationDataProvider" id="provider">

  </Section>
  
  <p>The rest of this section will discuss how the basic <code>LocalizationDataProvider</code> works as well as its dependencies (which you can swap out at any point).

  <Section title="ILocaleCache" id="storage">
    <br/>
    The <code>ILocaleCache</code> interface is used to cache the various localization lookups. The basic implementation is a thread-safe in-memory cache called
    <code>ThreadSafeLocaleCache</code>. The interface provides methods for reading from and writing to the cache:</p>
  </Section>
  
  <Snippet name="ILocaleCache" />
  
  <Section title="ILocalizationMissingHandler" id="missing">
    <br/>
    The <code>ILocalizationMissingHandler</code> is called when a <code>LocalizationKey</code> does not exist in the cache. The default implementation,
    <code>LocalizationMissingHandler</code>, simply leverages existing default values and delegates to the storage interface for retrieving/writing information. 
  </Section>
  
  <Snippet name="MissingHandler" />

  <Section title="ILocalizationStorage" id="storage">
    <br/>
    <p>The <code>ILocaliationStorage</code> interface is the most commonly overridden dependency. It allows you to specify the underlying peristence mechanism for all localized values.
    Out of the box, <code>FubuLocalization</code> has a basic XML implementation that leverages the local file system. This is explained in further detail in the next topic.</p>
  </Section>
  
</markdown>

